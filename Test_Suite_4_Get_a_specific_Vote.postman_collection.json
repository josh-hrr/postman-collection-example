{
	"info": {
		"_postman_id": "2aef6d74-4166-4ece-b36b-c97ee22cad98",
		"name": "Test Suite #4 Get a specific Vote",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "11217675"
	},
	"item": [
		{
			"name": "TC status code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200 OK', function() {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "live_yu0yyZCOuIvo0GIGDmjtURnVZKWZqQvE6R432x0H9sen3ZnRCxm5IEIzr9aBJYx5",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://api.thecatapi.com/v1/votes/930390",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"votes",
						"930390"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC headers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test('the header Content-Type is application/json; charset=utf-8', function(){  \r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8'); \r",
							"}); \r",
							"\r",
							"pm.test('the header Server is Google Frontend', function(){\r",
							"    pm.expect(pm.response.headers.get('Server')).to.eql('Google Frontend');\r",
							"}); \r",
							"\r",
							"pm.test('the header x-response-time is a string', function(){\r",
							"    pm.expect(pm.response.headers.get('x-response-time')).to.be.a('string');\r",
							"});\r",
							"/*\r",
							"pm.test('the response time is less than 250ms'+ ' Actual response time: ' + pm.response.responseTime + ' - '+ 'Header Response time: ' + pm.response.headers.get('x-response-time'), function(){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(250);\r",
							"})\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "live_yu0yyZCOuIvo0GIGDmjtURnVZKWZqQvE6R432x0H9sen3ZnRCxm5IEIzr9aBJYx5",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.thecatapi.com/v1/votes/930390",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"votes",
						"930390"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC schema",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = pm.response.json();\r",
							"\r",
							"pm.test('Schema is Object', function(){\r",
							"    pm.expect(schema).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"pm.test('value is integer', function(){\r",
							"    pm.expect(schema.value).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test('image_id is string', function(){\r",
							"    pm.expect(schema.image_id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test('sub_id is string', function(){\r",
							"    pm.expect(schema.sub_id).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test('created_at is string', function(){\r",
							"    pm.expect(schema.created_at).to.be.a(\"string\");\r",
							"});\r",
							"/*\r",
							"pm.test('id is string', function(){\r",
							"    pm.expect(schema.id).to.be.a(\"string\" + ' - ' + \" Actual Result: \" + typeof(schema.id));\r",
							"});\r",
							"*/\r",
							"\r",
							"pm.test('country_code is string', function(){\r",
							"    pm.expect(schema.country_code).to.be.a(\"string\");\r",
							"});  \r",
							"\r",
							"let objectKeysFromResponse = Object.keys(schema);\r",
							"\r",
							"for(let i = 0;i<objectKeysFromResponse.length;i++){  \r",
							"  if(objectKeysFromResponse[i] === 'value'){\r",
							"    pm.test('Expected key is = value - '+ ' Actual key: ' + objectKeysFromResponse[i], function(){\r",
							"        pm.expect(objectKeysFromResponse[i]).to.eql('value');\r",
							"    });\r",
							"  }else if(objectKeysFromResponse[i] === 'image_id'){\r",
							"    pm.test('Expected key is = image_id - '+ ' Actual key: ' + objectKeysFromResponse[i], function(){\r",
							"        pm.expect(objectKeysFromResponse[i]).to.eql('image_id');\r",
							"    });\r",
							"  }else if(objectKeysFromResponse[i] === 'sub_id'){\r",
							"    pm.test('Expected key is = sub_id - '+ ' Actual key: ' + objectKeysFromResponse[i], function(){\r",
							"        pm.expect(objectKeysFromResponse[i]).to.eql('sub_id');\r",
							"    }); \r",
							"  }else if(objectKeysFromResponse[i] === 'created_at'){\r",
							"    pm.test('Expected key is = created_at - '+ ' Actual key: ' + objectKeysFromResponse[i], function(){\r",
							"        pm.expect(objectKeysFromResponse[i]).to.eql('created_at');\r",
							"    });\r",
							"  }else if(objectKeysFromResponse[i] === 'id'){\r",
							"    pm.test('Expected key is = id - '+ ' Actual key: ' + objectKeysFromResponse[i], function(){\r",
							"        pm.expect(objectKeysFromResponse[i]).to.eql('id');\r",
							"    });\r",
							"  }else if(objectKeysFromResponse[i] === 'country_code'){\r",
							"    pm.test('Expected key is = country_code - '+ ' Actual key: ' + objectKeysFromResponse[i], function(){\r",
							"        pm.expect(objectKeysFromResponse[i]).to.eql('country_code');\r",
							"    });\r",
							"  }\r",
							"}\r",
							"/*\r",
							"if(objectKeysFromResponse.length > 6){\r",
							"    pm.test('Expected length = 6' + ' Actual length = ' + objectKeysFromResponse.length, function(){\r",
							"        pm.expect(objectKeysFromResponse.length).eql(6);\r",
							"    })\r",
							"}\r",
							"*/\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "live_yu0yyZCOuIvo0GIGDmjtURnVZKWZqQvE6R432x0H9sen3ZnRCxm5IEIzr9aBJYx5",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.thecatapi.com/v1/votes/930390",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"votes",
						"930390"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC Negative - status code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status response is not 200 OK', function(){\r",
							"    pm.response.to.not.have.status(200)\r",
							"})\r",
							"\r",
							"pm.test('Status response is 404 Not Found', function(){\r",
							"    pm.response.to.have.status(404)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "live_yu0yyZCOuIvo0GIGDmjtURnVZKWZqQvE6R432x0H9sen3ZnRCxm5IEIzr9aBJYx5",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.thecatapi.com/v1/votes/-1",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"votes",
						"-1"
					]
				}
			},
			"response": []
		},
		{
			"name": "TC Negative - error message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test('Status code is 404 Not Found', function(){\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							"\r",
							"pm.test(\"Error message is: NOT_FOUND\", function () {\r",
							"  pm.response.to.have.body('NOT_FOUND');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "live_yu0yyZCOuIvo0GIGDmjtURnVZKWZqQvE6R432x0H9sen3ZnRCxm5IEIzr9aBJYx5",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "x-api-key",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.thecatapi.com/v1/votes/100000",
					"protocol": "https",
					"host": [
						"api",
						"thecatapi",
						"com"
					],
					"path": [
						"v1",
						"votes",
						"100000"
					]
				}
			},
			"response": []
		}
	]
}
